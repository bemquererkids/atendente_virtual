# ‚úÖ Importa√ß√µes dos componentes essenciais do LangChain
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_openai import ChatOpenAI
from langchain.agents import Tool, initialize_agent

# ‚úÖ Importa√ß√µes locais do projeto
from app.memoria.historico_redis import obter_historico_usuario
from app.tools.especialidade_tool import responder_especialidade

# ‚öôÔ∏è Configura√ß√£o do modelo LLM
# Estamos usando o GPT-4 com baixa temperatura para manter consist√™ncia nas respostas
llm = ChatOpenAI(model="gpt-4", temperature=0.3)

# üß∞ Defini√ß√£o da lista de ferramentas (Tools) dispon√≠veis para o agente
# Aqui inclu√≠mos a fun√ß√£o responder_especialidade, que pode ser chamada pelo agente quando detectar inten√ß√£o
ferramentas = [
    Tool(
        name="responder_especialidade",
        func=responder_especialidade,  # fun√ß√£o que ser√° executada
        description=(
            "Use esta ferramenta para responder perguntas sobre especialidades da cl√≠nica.\n"
            "Aceita perguntas em texto livre (ex: 'Voc√™s fazem implante?') ou em formato JSON com campos:\n"
            "{'clinica_id': 'bemquerer', 'especialidade': 'implante'}"
        ),
    )
]

# üß† Prompt base que guia o comportamento do agente
# Inclui o hist√≥rico da conversa e um tom acolhedor, com input humano ao final
prompt = ChatPromptTemplate.from_messages([
    ("system", "Voc√™ √© uma secret√°ria acolhedora e atenciosa de uma cl√≠nica odontol√≥gica."),
    MessagesPlaceholder(variable_name="history"),  # mem√≥ria da conversa
    ("human", "{input}")  # entrada mais recente do usu√°rio
])

# ü§ñ Cria√ß√£o do agente com hist√≥rico da conversa usando Redis
# O agente usa o tipo "chat-zero-shot-react-description" e pode invocar ferramentas conforme necess√°rio
agente_com_memoria = RunnableWithMessageHistory(
    initialize_agent(
        tools=ferramentas,           # ferramentas que o agente pode usar
        llm=llm,                     # modelo de linguagem configurado
        agent_type="chat-zero-shot-react-description",
        verbose=True,                # log detalhado no console
        handle_parsing_errors=True  # evita falha total em erros de formata√ß√£o
    ),
    lambda session_id: obter_historico_usuario(session_id),  # fun√ß√£o que recupera hist√≥rico no Redis
    input_messages_key="input",       # nome da vari√°vel com a mensagem atual
    history_messages_key="history"    # nome da vari√°vel com o hist√≥rico da conversa
)